// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Head                 *MessageHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	Body                 *MessageBody `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	DataPlus             []byte       `protobuf:"bytes,3,opt,name=DataPlus,proto3" json:"DataPlus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetHead() *MessageHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Message) GetBody() *MessageBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetDataPlus() []byte {
	if m != nil {
		return m.DataPlus
	}
	return nil
}

type MessageHead struct {
	RecvId               []byte   `protobuf:"bytes,1,opt,name=RecvId,proto3" json:"RecvId,omitempty"`
	RecvSuperId          []byte   `protobuf:"bytes,2,opt,name=RecvSuperId,proto3" json:"RecvSuperId,omitempty"`
	RecvVnode            []byte   `protobuf:"bytes,3,opt,name=RecvVnode,proto3" json:"RecvVnode,omitempty"`
	Sender               []byte   `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	SenderSuperId        []byte   `protobuf:"bytes,5,opt,name=SenderSuperId,proto3" json:"SenderSuperId,omitempty"`
	SenderVnode          []byte   `protobuf:"bytes,6,opt,name=SenderVnode,proto3" json:"SenderVnode,omitempty"`
	Accurate             bool     `protobuf:"varint,7,opt,name=Accurate,proto3" json:"Accurate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageHead) Reset()         { *m = MessageHead{} }
func (m *MessageHead) String() string { return proto.CompactTextString(m) }
func (*MessageHead) ProtoMessage()    {}
func (*MessageHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *MessageHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHead.Merge(m, src)
}
func (m *MessageHead) XXX_Size() int {
	return m.Size()
}
func (m *MessageHead) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHead.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHead proto.InternalMessageInfo

func (m *MessageHead) GetRecvId() []byte {
	if m != nil {
		return m.RecvId
	}
	return nil
}

func (m *MessageHead) GetRecvSuperId() []byte {
	if m != nil {
		return m.RecvSuperId
	}
	return nil
}

func (m *MessageHead) GetRecvVnode() []byte {
	if m != nil {
		return m.RecvVnode
	}
	return nil
}

func (m *MessageHead) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MessageHead) GetSenderSuperId() []byte {
	if m != nil {
		return m.SenderSuperId
	}
	return nil
}

func (m *MessageHead) GetSenderVnode() []byte {
	if m != nil {
		return m.SenderVnode
	}
	return nil
}

func (m *MessageHead) GetAccurate() bool {
	if m != nil {
		return m.Accurate
	}
	return false
}

type MessageBody struct {
	MessageId            uint64   `protobuf:"varint,1,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	CreateTime           uint64   `protobuf:"varint,2,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	ReplyTime            uint64   `protobuf:"varint,3,opt,name=ReplyTime,proto3" json:"ReplyTime,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ReplyHash            []byte   `protobuf:"bytes,5,opt,name=ReplyHash,proto3" json:"ReplyHash,omitempty"`
	SendRand             uint64   `protobuf:"varint,6,opt,name=SendRand,proto3" json:"SendRand,omitempty"`
	RecvRand             uint64   `protobuf:"varint,7,opt,name=RecvRand,proto3" json:"RecvRand,omitempty"`
	Content              []byte   `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageBody) Reset()         { *m = MessageBody{} }
func (m *MessageBody) String() string { return proto.CompactTextString(m) }
func (*MessageBody) ProtoMessage()    {}
func (*MessageBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *MessageBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBody.Merge(m, src)
}
func (m *MessageBody) XXX_Size() int {
	return m.Size()
}
func (m *MessageBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBody.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBody proto.InternalMessageInfo

func (m *MessageBody) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *MessageBody) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *MessageBody) GetReplyTime() uint64 {
	if m != nil {
		return m.ReplyTime
	}
	return 0
}

func (m *MessageBody) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MessageBody) GetReplyHash() []byte {
	if m != nil {
		return m.ReplyHash
	}
	return nil
}

func (m *MessageBody) GetSendRand() uint64 {
	if m != nil {
		return m.SendRand
	}
	return 0
}

func (m *MessageBody) GetRecvRand() uint64 {
	if m != nil {
		return m.RecvRand
	}
	return 0
}

func (m *MessageBody) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "go_protos.Message")
	proto.RegisterType((*MessageHead)(nil), "go_protos.MessageHead")
	proto.RegisterType((*MessageBody)(nil), "go_protos.MessageBody")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0xbe, 0x73, 0x29, 0x14, 0x4e, 0x61, 0x33, 0x0b, 0x32, 0xb9, 0xe1, 0x36, 0x0d, 0x71, 0x41,
	0x5c, 0xd4, 0x44, 0x9f, 0x40, 0x70, 0x01, 0x0b, 0x13, 0x33, 0x18, 0x17, 0x6e, 0xcc, 0x48, 0x4f,
	0xd0, 0x04, 0x5a, 0xd2, 0x16, 0x13, 0x16, 0xbe, 0x87, 0x8f, 0xe4, 0xd2, 0x47, 0x50, 0x5c, 0xfb,
	0x0e, 0x66, 0xce, 0x4c, 0x87, 0xba, 0x70, 0xd5, 0xf3, 0xfd, 0xcc, 0x77, 0xe6, 0x9b, 0x14, 0x7a,
	0x6b, 0x2c, 0x0a, 0xb5, 0xc4, 0x78, 0x93, 0x67, 0x65, 0xc6, 0x3b, 0xcb, 0xec, 0x8e, 0xa6, 0x62,
	0xf8, 0x0c, 0xfe, 0xa5, 0xd1, 0xf8, 0x31, 0x78, 0x53, 0x54, 0x89, 0x60, 0x11, 0x1b, 0x05, 0xa7,
	0xfd, 0xd8, 0x99, 0x62, 0xeb, 0xd0, 0xaa, 0x24, 0x8f, 0xf6, 0x8e, 0xb3, 0x64, 0x27, 0xfe, 0xfe,
	0xe6, 0xd5, 0xaa, 0x24, 0x0f, 0xff, 0x07, 0xed, 0x0b, 0x55, 0xaa, 0xab, 0xd5, 0xb6, 0x10, 0x8d,
	0x88, 0x8d, 0xba, 0xd2, 0xe1, 0xe1, 0x07, 0x83, 0xa0, 0x96, 0xce, 0xfb, 0xd0, 0x92, 0xb8, 0x78,
	0x9a, 0x99, 0x5b, 0x74, 0xa5, 0x45, 0x3c, 0x82, 0x40, 0x4f, 0xf3, 0xed, 0x06, 0xf3, 0x59, 0x42,
	0x6b, 0xbb, 0xb2, 0x4e, 0xf1, 0x01, 0x74, 0x34, 0xbc, 0x49, 0xb3, 0x04, 0xed, 0x9a, 0x03, 0xa1,
	0x73, 0xe7, 0x98, 0x26, 0x98, 0x0b, 0xcf, 0xe4, 0x1a, 0xc4, 0x8f, 0xa0, 0x67, 0xa6, 0x2a, 0xb9,
	0x49, 0xf2, 0x4f, 0x52, 0x6f, 0x37, 0x84, 0x49, 0x6f, 0x99, 0xed, 0x35, 0x4a, 0x77, 0x3c, 0x5f,
	0x2c, 0xb6, 0xb9, 0x2a, 0x51, 0xf8, 0x11, 0x1b, 0xb5, 0xa5, 0xc3, 0xc3, 0xaf, 0x43, 0x47, 0x7a,
	0x8f, 0x01, 0x74, 0x2c, 0xb4, 0x35, 0x3d, 0x79, 0x20, 0x78, 0x08, 0x30, 0xc9, 0x51, 0x95, 0x78,
	0xfd, 0xb8, 0x46, 0x2a, 0xea, 0xc9, 0x1a, 0x63, 0x7a, 0x6e, 0x56, 0x3b, 0x92, 0x1b, 0xe6, 0xb4,
	0x23, 0x38, 0x07, 0x6f, 0xaa, 0x8a, 0x07, 0xdb, 0x92, 0x66, 0x77, 0x82, 0x84, 0x66, 0xf5, 0x32,
	0x96, 0xd0, 0x37, 0xd7, 0x45, 0xa4, 0x4a, 0x13, 0x2a, 0xe6, 0x49, 0x87, 0xb5, 0xa6, 0x9f, 0x90,
	0x34, 0xdf, 0x68, 0x15, 0xe6, 0x02, 0xfc, 0x49, 0x96, 0x96, 0x98, 0x96, 0xa2, 0x4d, 0x99, 0x15,
	0x1c, 0xff, 0x7f, 0xdd, 0x87, 0xec, 0x6d, 0x1f, 0xb2, 0xf7, 0x7d, 0xc8, 0x5e, 0x3e, 0xc3, 0x3f,
	0xb7, 0x41, 0x7c, 0xe2, 0x7e, 0x90, 0xfb, 0x16, 0x7d, 0xcf, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0xbc, 0xe3, 0x2e, 0x94, 0x02, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataPlus) > 0 {
		i -= len(m.DataPlus)
		copy(dAtA[i:], m.DataPlus)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DataPlus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Accurate {
		i--
		if m.Accurate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.SenderVnode) > 0 {
		i -= len(m.SenderVnode)
		copy(dAtA[i:], m.SenderVnode)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SenderVnode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderSuperId) > 0 {
		i -= len(m.SenderSuperId)
		copy(dAtA[i:], m.SenderSuperId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SenderSuperId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecvVnode) > 0 {
		i -= len(m.RecvVnode)
		copy(dAtA[i:], m.RecvVnode)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RecvVnode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecvSuperId) > 0 {
		i -= len(m.RecvSuperId)
		copy(dAtA[i:], m.RecvSuperId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RecvSuperId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecvId) > 0 {
		i -= len(m.RecvId)
		copy(dAtA[i:], m.RecvId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RecvId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x42
	}
	if m.RecvRand != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RecvRand))
		i--
		dAtA[i] = 0x38
	}
	if m.SendRand != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SendRand))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReplyHash) > 0 {
		i -= len(m.ReplyHash)
		copy(dAtA[i:], m.ReplyHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ReplyHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReplyTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplyTime))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DataPlus)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecvId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RecvSuperId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RecvVnode)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SenderSuperId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SenderVnode)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Accurate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovMessage(uint64(m.MessageId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessage(uint64(m.CreateTime))
	}
	if m.ReplyTime != 0 {
		n += 1 + sovMessage(uint64(m.ReplyTime))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ReplyHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SendRand != 0 {
		n += 1 + sovMessage(uint64(m.SendRand))
	}
	if m.RecvRand != 0 {
		n += 1 + sovMessage(uint64(m.RecvRand))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &MessageHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &MessageBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPlus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPlus = append(m.DataPlus[:0], dAtA[iNdEx:postIndex]...)
			if m.DataPlus == nil {
				m.DataPlus = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvId = append(m.RecvId[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvId == nil {
				m.RecvId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSuperId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSuperId = append(m.RecvSuperId[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvSuperId == nil {
				m.RecvSuperId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvVnode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvVnode = append(m.RecvVnode[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvVnode == nil {
				m.RecvVnode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSuperId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSuperId = append(m.SenderSuperId[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderSuperId == nil {
				m.SenderSuperId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderVnode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderVnode = append(m.SenderVnode[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderVnode == nil {
				m.SenderVnode = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accurate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accurate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTime", wireType)
			}
			m.ReplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyHash = append(m.ReplyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyHash == nil {
				m.ReplyHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRand", wireType)
			}
			m.SendRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvRand", wireType)
			}
			m.RecvRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
