// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: searchnodeinfo.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchNodeInfo struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SuperId              []byte   `protobuf:"bytes,2,opt,name=SuperId,proto3" json:"SuperId,omitempty"`
	CPuk                 []byte   `protobuf:"bytes,3,opt,name=CPuk,proto3" json:"CPuk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchNodeInfo) Reset()         { *m = SearchNodeInfo{} }
func (m *SearchNodeInfo) String() string { return proto.CompactTextString(m) }
func (*SearchNodeInfo) ProtoMessage()    {}
func (*SearchNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c08cb7ad54b44b, []int{0}
}
func (m *SearchNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchNodeInfo.Merge(m, src)
}
func (m *SearchNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *SearchNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SearchNodeInfo proto.InternalMessageInfo

func (m *SearchNodeInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SearchNodeInfo) GetSuperId() []byte {
	if m != nil {
		return m.SuperId
	}
	return nil
}

func (m *SearchNodeInfo) GetCPuk() []byte {
	if m != nil {
		return m.CPuk
	}
	return nil
}

type ShareKey struct {
	Idinfo               *IdInfo  `protobuf:"bytes,1,opt,name=Idinfo,proto3" json:"Idinfo,omitempty"`
	A_DH_PUK             []byte   `protobuf:"bytes,2,opt,name=A_DH_PUK,json=ADHPUK,proto3" json:"A_DH_PUK,omitempty"`
	B_DH_PUK             []byte   `protobuf:"bytes,3,opt,name=B_DH_PUK,json=BDHPUK,proto3" json:"B_DH_PUK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareKey) Reset()         { *m = ShareKey{} }
func (m *ShareKey) String() string { return proto.CompactTextString(m) }
func (*ShareKey) ProtoMessage()    {}
func (*ShareKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c08cb7ad54b44b, []int{1}
}
func (m *ShareKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareKey.Merge(m, src)
}
func (m *ShareKey) XXX_Size() int {
	return m.Size()
}
func (m *ShareKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareKey.DiscardUnknown(m)
}

var xxx_messageInfo_ShareKey proto.InternalMessageInfo

func (m *ShareKey) GetIdinfo() *IdInfo {
	if m != nil {
		return m.Idinfo
	}
	return nil
}

func (m *ShareKey) GetA_DH_PUK() []byte {
	if m != nil {
		return m.A_DH_PUK
	}
	return nil
}

func (m *ShareKey) GetB_DH_PUK() []byte {
	if m != nil {
		return m.B_DH_PUK
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchNodeInfo)(nil), "go_protos.SearchNodeInfo")
	proto.RegisterType((*ShareKey)(nil), "go_protos.ShareKey")
}

func init() { proto.RegisterFile("searchnodeinfo.proto", fileDescriptor_d3c08cb7ad54b44b) }

var fileDescriptor_d3c08cb7ad54b44b = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xc8, 0xcb, 0x4f, 0x49, 0xcd, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0xb8, 0x40, 0x52, 0x10, 0x61, 0x25, 0x3f,
	0x2e, 0xbe, 0x60, 0xb0, 0x72, 0xbf, 0xfc, 0x94, 0x54, 0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x3e, 0x2e,
	0x26, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x26, 0xcf, 0x14, 0x21, 0x09, 0x2e,
	0xf6, 0xe0, 0xd2, 0x82, 0xd4, 0x22, 0xcf, 0x14, 0x09, 0x26, 0xb0, 0x20, 0x8c, 0x2b, 0x24, 0xc4,
	0xc5, 0xe2, 0x1c, 0x50, 0x9a, 0x2d, 0xc1, 0x0c, 0x16, 0x06, 0xb3, 0x95, 0x32, 0xb9, 0x38, 0x82,
	0x33, 0x12, 0x8b, 0x52, 0xbd, 0x53, 0x2b, 0x85, 0x34, 0xb9, 0xd8, 0x3c, 0x53, 0x40, 0x4e, 0x00,
	0x9b, 0xc6, 0x6d, 0x24, 0xa8, 0x07, 0x77, 0x83, 0x9e, 0x67, 0x0a, 0xc8, 0xb2, 0x20, 0xa8, 0x02,
	0x21, 0x09, 0x2e, 0x0e, 0xc7, 0x78, 0x17, 0x8f, 0xf8, 0x80, 0x50, 0x6f, 0xa8, 0x2d, 0x6c, 0x8e,
	0x2e, 0x1e, 0x01, 0xa1, 0xde, 0x20, 0x19, 0x27, 0x98, 0x0c, 0xc4, 0x22, 0x36, 0x27, 0xb0, 0x8c,
	0x93, 0xec, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x14, 0xb7, 0x9e, 0x3e, 0xdc, 0x86, 0x24, 0x36, 0x30, 0x6d, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0xae, 0xd2, 0xa4, 0x0f, 0x01, 0x00, 0x00,
}

func (m *SearchNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CPuk) > 0 {
		i -= len(m.CPuk)
		copy(dAtA[i:], m.CPuk)
		i = encodeVarintSearchnodeinfo(dAtA, i, uint64(len(m.CPuk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SuperId) > 0 {
		i -= len(m.SuperId)
		copy(dAtA[i:], m.SuperId)
		i = encodeVarintSearchnodeinfo(dAtA, i, uint64(len(m.SuperId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSearchnodeinfo(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.B_DH_PUK) > 0 {
		i -= len(m.B_DH_PUK)
		copy(dAtA[i:], m.B_DH_PUK)
		i = encodeVarintSearchnodeinfo(dAtA, i, uint64(len(m.B_DH_PUK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.A_DH_PUK) > 0 {
		i -= len(m.A_DH_PUK)
		copy(dAtA[i:], m.A_DH_PUK)
		i = encodeVarintSearchnodeinfo(dAtA, i, uint64(len(m.A_DH_PUK)))
		i--
		dAtA[i] = 0x12
	}
	if m.Idinfo != nil {
		{
			size, err := m.Idinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchnodeinfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSearchnodeinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearchnodeinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	l = len(m.SuperId)
	if l > 0 {
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	l = len(m.CPuk)
	if l > 0 {
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idinfo != nil {
		l = m.Idinfo.Size()
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	l = len(m.A_DH_PUK)
	if l > 0 {
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	l = len(m.B_DH_PUK)
	if l > 0 {
		n += 1 + l + sovSearchnodeinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSearchnodeinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearchnodeinfo(x uint64) (n int) {
	return sovSearchnodeinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchnodeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperId = append(m.SuperId[:0], dAtA[iNdEx:postIndex]...)
			if m.SuperId == nil {
				m.SuperId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPuk = append(m.CPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.CPuk == nil {
				m.CPuk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchnodeinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchnodeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Idinfo == nil {
				m.Idinfo = &IdInfo{}
			}
			if err := m.Idinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A_DH_PUK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A_DH_PUK = append(m.A_DH_PUK[:0], dAtA[iNdEx:postIndex]...)
			if m.A_DH_PUK == nil {
				m.A_DH_PUK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B_DH_PUK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B_DH_PUK = append(m.B_DH_PUK[:0], dAtA[iNdEx:postIndex]...)
			if m.B_DH_PUK == nil {
				m.B_DH_PUK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchnodeinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchnodeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearchnodeinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearchnodeinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchnodeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearchnodeinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearchnodeinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearchnodeinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearchnodeinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearchnodeinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearchnodeinfo = fmt.Errorf("proto: unexpected end of group")
)
